import nmap
import requests
import argparse

def scan_target(targets, ports):
    """
    Scans the target IP address(es) for open ports and services using nmap.
    """
    nm = nmap.PortScanner()
    target_str = ' '.join(targets)
    
    print(f"Scanning {target_str} on ports {ports}...")
    nm.scan(target_str, arguments=f'-p {ports} -sV')
    
    scan_results = {}
    
    for host in nm.all_hosts():
        print(f"\nHost: {host} ({nm[host].hostname()})")
        print(f"State: {nm[host].state()}")
        scan_results[host] = []
        
        for proto in nm[host].all_protocols():
            ports = nm[host][proto].keys()
            for port in ports:
                service_name = nm[host][proto][port]['name']
                product = nm[host][proto][port].get('product', '')
                version = nm[host][proto][port].get('version', '')
                
                print(f"Port: {port}/{proto}, Service: {service_name}, Product: {product}, Version: {version}")
                
                scan_results[host].append({
                    'port': port,
                    'service': service_name,
                    'product': product,
                    'version': version
                })
    
    return scan_results

def get_cve_data(service_name, version):
    """
    Fetch CVE data for a service name and version from the CIRCL CVE Search API.
    """
    cve_api_url = f"https://cve.circl.lu/api/search/{service_name}/{version}"
    
    response = requests.get(cve_api_url)
    
    if response.status_code == 200:
        cve_data = response.json()
        if cve_data:
            return cve_data
    return []

def check_vulnerabilities(scan_results):
    """
    Cross-references the services found in the scan results with CVEs.
    """
    for host, services in scan_results.items():
        print(f"\nChecking vulnerabilities for {host}...")
        
        for service in services:
            service_name = service['service']
            version = service['version']

            # Fetch CVE data for the service and version
            cve_data = get_cve_data(service_name, version)

            if cve_data:
                print(f"Vulnerabilities for {service_name} {version}:")
                for cve in cve_data:
                    print(f"  - {cve['id']}: {cve['summary']}")
            else:
                print(f"No vulnerabilities found for {service_name} {version}")

def generate_report(scan_results, report_file):
    """
    Generates a report of the scan results and CVE vulnerabilities in a text file.
    """
    with open(report_file, 'w') as f:
        for host, services in scan_results.items():
            f.write(f"\nHost: {host}\n")
            for service in services:
                service_name = service['service']
                version = service['version']
                
                f.write(f"Service: {service_name} Version: {version}\n")
                
                # Fetch CVE data for the service and version
                cve_data = get_cve_data(service_name, version)
                
                if cve_data:
                    f.write("Vulnerabilities:\n")
                    for cve in cve_data:
                        f.write(f"  - {cve['id']}: {cve['summary']}\n")
                else:
                    f.write("  No vulnerabilities found\n")
    
    print(f"Report generated: {report_file}")

def main():
    parser = argparse.ArgumentParser(description="Vulnerability Scanner with CVE Search")
    
    # Required argument for target IPs
    parser.add_argument('--target', nargs='+', required=True, help="Target IP(s) or range (e.g. 192.168.1.1 or 192.168.1.1 192.168.1.2)")
    
    # Optional port range argument
    parser.add_argument('--ports', default='1-65535', help="Port range to scan (default: 1-65535)")
    
    # Optional output file
    parser.add_argument('--output', help="Output report file (e.g. report.txt)")

    args = parser.parse_args()

    # Perform the scan
    scan_results = scan_target(args.target, args.ports)
    
    # Check for vulnerabilities
    check_vulnerabilities(scan_results)
    
    # Generate a report if the output flag is provided
    if args.output:
        generate_report(scan_results, args.output)
    else:
        print("No output file specified. Results will not be saved to a file.")

if __name__ == "__main__":
    main()
